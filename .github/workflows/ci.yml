name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 9 * * *"

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint:
    name: Format & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "${{ runner.tool_cache }}/poetry/bin" >> $GITHUB_PATH

      - name: Install Dependencies with Poetry
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run Ruff Linting
        run: |
          poetry run ruff check .

      - name: Run Ruff Formatting
        run: |
          poetry run ruff format . --diff

      - name: Run Mypy Type Checking
        run: |
          poetry run mypy .

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SERVER_OPENAI_API_KEY: ${{ secrets.SERVER_OPENAI_API_KEY }}
      SERVER_GOOGLE_AUTH_CLIENT_ID: ${{ secrets.SERVER_GOOGLE_AUTH_CLIENT_ID }}
      SERVER_GOOGLE_AUTH_CLIENT_SECRET: ${{ secrets.SERVER_GOOGLE_AUTH_CLIENT_SECRET }}
      CLI_OPENAI_API_KEY: ${{ secrets.CLI_OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run compose test
        id: run_tests
        run: |
          docker compose -f compose.yml -f compose.ci.yml run runner

      - name: Get service names
        id: service_names
        if: always()
        run: |
          SERVICE_NAMES=$(docker compose config --services)
          echo "names<<EOF" >> $GITHUB_OUTPUT
          echo "$SERVICE_NAMES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print logs for each service
        if: always()
        run: |
          echo "${{ steps.service_names.outputs.names }}" | while read -r service; do
            echo "Logs for service: $service"
            docker compose logs "$service"
          done
